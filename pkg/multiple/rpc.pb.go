// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: rpc.proto

package multiple

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TopNReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinKey int64 `protobuf:"varint,1,opt,name=minKey,proto3" json:"minKey,omitempty"`
	MaxKey int64 `protobuf:"varint,2,opt,name=maxKey,proto3" json:"maxKey,omitempty"`
	Topn   int64 `protobuf:"varint,3,opt,name=topn,proto3" json:"topn,omitempty"`
}

func (x *TopNReq) Reset() {
	*x = TopNReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNReq) ProtoMessage() {}

func (x *TopNReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNReq.ProtoReflect.Descriptor instead.
func (*TopNReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *TopNReq) GetMinKey() int64 {
	if x != nil {
		return x.MinKey
	}
	return 0
}

func (x *TopNReq) GetMaxKey() int64 {
	if x != nil {
		return x.MaxKey
	}
	return 0
}

func (x *TopNReq) GetTopn() int64 {
	if x != nil {
		return x.Topn
	}
	return 0
}

type KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int64  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KV) Reset() {
	*x = KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *KV) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *KV) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TopNRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KvList []*KV `protobuf:"bytes,1,rep,name=kvList,proto3" json:"kvList,omitempty"`
}

func (x *TopNRsp) Reset() {
	*x = TopNRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNRsp) ProtoMessage() {}

func (x *TopNRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNRsp.ProtoReflect.Descriptor instead.
func (*TopNRsp) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *TopNRsp) GetKvList() []*KV {
	if x != nil {
		return x.KvList
	}
	return nil
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x4e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x6e, 0x22, 0x2c, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2e, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x4e, 0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06,
	0x6b, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x06, 0x6b, 0x76, 0x4c, 0x69, 0x73,
	0x74, 0x32, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4e, 0x12, 0x32, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x4e, 0x12, 0x10, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x32, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x70,
	0x4e, 0x12, 0x35, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x4e, 0x12, 0x10, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70,
	0x4e, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x6f, 0x70, 0x4e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x6e, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x6e, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rpc_proto_goTypes = []interface{}{
	(*TopNReq)(nil), // 0: cluster.TopNReq
	(*KV)(nil),      // 1: cluster.KV
	(*TopNRsp)(nil), // 2: cluster.TopNRsp
}
var file_rpc_proto_depIdxs = []int32{
	1, // 0: cluster.TopNRsp.kvList:type_name -> cluster.KV
	0, // 1: cluster.GetTopN.GetAllTopN:input_type -> cluster.TopNReq
	0, // 2: cluster.GetWorkerTopN.GetWorkerTopN:input_type -> cluster.TopNReq
	2, // 3: cluster.GetTopN.GetAllTopN:output_type -> cluster.TopNRsp
	2, // 4: cluster.GetWorkerTopN.GetWorkerTopN:output_type -> cluster.TopNRsp
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetTopNClient is the client API for GetTopN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetTopNClient interface {
	// user interface, return topn by range[minkey,maxkey] in global data
	GetAllTopN(ctx context.Context, in *TopNReq, opts ...grpc.CallOption) (*TopNRsp, error)
}

type getTopNClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTopNClient(cc grpc.ClientConnInterface) GetTopNClient {
	return &getTopNClient{cc}
}

func (c *getTopNClient) GetAllTopN(ctx context.Context, in *TopNReq, opts ...grpc.CallOption) (*TopNRsp, error) {
	out := new(TopNRsp)
	err := c.cc.Invoke(ctx, "/cluster.GetTopN/GetAllTopN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetTopNServer is the server API for GetTopN service.
type GetTopNServer interface {
	// user interface, return topn by range[minkey,maxkey] in global data
	GetAllTopN(context.Context, *TopNReq) (*TopNRsp, error)
}

// UnimplementedGetTopNServer can be embedded to have forward compatible implementations.
type UnimplementedGetTopNServer struct {
}

func (*UnimplementedGetTopNServer) GetAllTopN(context.Context, *TopNReq) (*TopNRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTopN not implemented")
}

func RegisterGetTopNServer(s *grpc.Server, srv GetTopNServer) {
	s.RegisterService(&_GetTopN_serviceDesc, srv)
}

func _GetTopN_GetAllTopN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTopNServer).GetAllTopN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.GetTopN/GetAllTopN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTopNServer).GetAllTopN(ctx, req.(*TopNReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetTopN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.GetTopN",
	HandlerType: (*GetTopNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTopN",
			Handler:    _GetTopN_GetAllTopN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// GetWorkerTopNClient is the client API for GetWorkerTopN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetWorkerTopNClient interface {
	// master interface, return topn by range[minkey, maxkey] in worker
	GetWorkerTopN(ctx context.Context, in *TopNReq, opts ...grpc.CallOption) (*TopNRsp, error)
}

type getWorkerTopNClient struct {
	cc grpc.ClientConnInterface
}

func NewGetWorkerTopNClient(cc grpc.ClientConnInterface) GetWorkerTopNClient {
	return &getWorkerTopNClient{cc}
}

func (c *getWorkerTopNClient) GetWorkerTopN(ctx context.Context, in *TopNReq, opts ...grpc.CallOption) (*TopNRsp, error) {
	out := new(TopNRsp)
	err := c.cc.Invoke(ctx, "/cluster.GetWorkerTopN/GetWorkerTopN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetWorkerTopNServer is the server API for GetWorkerTopN service.
type GetWorkerTopNServer interface {
	// master interface, return topn by range[minkey, maxkey] in worker
	GetWorkerTopN(context.Context, *TopNReq) (*TopNRsp, error)
}

// UnimplementedGetWorkerTopNServer can be embedded to have forward compatible implementations.
type UnimplementedGetWorkerTopNServer struct {
}

func (*UnimplementedGetWorkerTopNServer) GetWorkerTopN(context.Context, *TopNReq) (*TopNRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerTopN not implemented")
}

func RegisterGetWorkerTopNServer(s *grpc.Server, srv GetWorkerTopNServer) {
	s.RegisterService(&_GetWorkerTopN_serviceDesc, srv)
}

func _GetWorkerTopN_GetWorkerTopN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetWorkerTopNServer).GetWorkerTopN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.GetWorkerTopN/GetWorkerTopN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetWorkerTopNServer).GetWorkerTopN(ctx, req.(*TopNReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetWorkerTopN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.GetWorkerTopN",
	HandlerType: (*GetWorkerTopNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkerTopN",
			Handler:    _GetWorkerTopN_GetWorkerTopN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
